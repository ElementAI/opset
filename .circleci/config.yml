version: 2.1

jobs:
  test:
    working_directory: ~/workdir
    docker:
      - image: circleci/python:3.7.1
    steps:
      - checkout

      - run:
          name: BASH_ENV PATH
          command: echo "export PATH=$PATH:/home/circleci/.local/bin" >> $BASH_ENV

      - restore_cache:
          keys:
            - v1-local-deps-{{ checksum "Makefile" }}
            - v1-local-deps

      - run:
          name: Install system requirements
          command: make bootstrap-user

      - save_cache:
          key: v1-local-deps-{{ checksum "Makefile" }}
          paths:
            - /home/circleci/.local

      - restore_cache:
          keys:
            - v1-deps-{{ checksum "poetry.lock" }}
            - v1-deps

      - run:
          name: Install deps
          command: poetry install

      - save_cache:
          key: v1-deps-{{ checksum "poetry.lock" }}
          paths:
              - /home/circleci/.cache/pypoetry/virtualenvs

      - run:
          name: Lint
          command: |
            make lint

      - run:
          name: Testing
          command: |
            make test

      - run:
          name: Coveralls
          command: poetry run coveralls

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - workdir
            - .local

  security_python_bandit:
    working_directory: ~/workdir
    docker:
      - image: circleci/python:3.7
    steps:
      - attach_workspace:
          at: /home/circleci

      - run:
          name: BASH_ENV PATH
          command: echo "export PATH=$PATH:/home/circleci/.local/bin" >> $BASH_ENV

      - run:
          name: Run security vulnerability checks
          command: make bandit || export SOME_TEST_FAILED=true

      - run:
          name: log bandit
          command: cat reports/security/bandit/index.json

      - persist_to_workspace:
          root: reports
          paths:
            - security/bandit

  security_python_sonarqube:
    working_directory: ~/workdir
    docker:
      - image: circleci/node:14.5.0
    steps:
      - attach_workspace:
          at: /home/circleci

      - run:
          name: mv and log bandit
          command: |
            mkdir reports
            mv ../security reports/.
            cat reports/security/bandit/index.json

      - add_ssh_keys:
          fingerprints:
            - "19:4b:7b:a6:59:fe:6a:32:15:17:69:dd:1a:2b:e4:3c"
      - run:
          name: Install proxychains
          command: sudo apt-get install proxychains -y --fix-missing
      - run:
          name: Modify configuration file
          command: sudo sed -i 's/socks4/socks5/g' /etc/proxychains.conf && sudo sed -i 's/proxy_dns/#proxy_dns/g' /etc/proxychains.conf
      - run:
          name: Create SSH tunnel
          command: sudo ssh -4 -i ~/.ssh/id_rsa_194b7ba659fe6a32151769dd1a2be43c -D 9050 eaisast@circleci-pivot.eastus.cloudapp.azure.com -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
          background: true
      - run:
          name: Install sonar scanner
          command: sudo npm install -g sonarqube-scanner typescript --save
      - run:
          name: Import in Sonarqube
          command: |
            export PATH=$PATH:"/usr/local/lib/node_modules/sonarqube-scanner/dist/bin"
            export NODE_PATH="/usr/local/lib/node_modules"
            proxychains sonar-scanner -Dsonar.projectKey=opset -Dsonar.sources=. -Dsonar.host.url=https://sc-eai.eastus.cloudapp.azure.com -Dsonar.login=${SONARQUBE_PYTHON} -Dsonar.python.bandit.reportPaths=./reports/security/bandit/index.json

workflows:
  version: 2
  test_build_and_deploy:
    jobs:
      - test
      - security_python_bandit:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - security_python_sonarqube:
          requires:
            - security_python_bandit
          filters:
            branches:
              only:
               - master
